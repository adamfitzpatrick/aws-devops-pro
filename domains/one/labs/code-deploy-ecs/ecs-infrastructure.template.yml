AWSTemplateFormatVersion: 2010-09-09
Description: >
  Infrastructure resources required as a pre-requisite to performing deployments from CodeDeploy to ECS
Parameters:
  Region:
    Type: String
    Default: us-west-2
  EcsExecutionRoleManagedPolicyArn:
    Type: String
    Default: arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  ContainerImageUri:
    Type: String
    Description: URI for the task definition container image
  ResourceNamePrefix:
    Type: String
    Default: codedeploy-ecs-demo
Resources:
  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref EcsExecutionRoleManagedPolicyArn
  EcsTaskLoggingPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ecs-logging-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource: '*'
      Roles:
        - !Ref EcsTaskExecutionRole
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/27
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Join
        - ''
        - - !Ref 'AWS::Region'
          - 'a'
      VpcId: !Ref Vpc
      CidrBlock: 192.168.0.0/28
  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Join
        - ''
        - - !Ref 'AWS::Region'
          - 'b'
      VpcId: !Ref Vpc
      CidrBlock: 192.168.0.16/28
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
  InternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetARouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref RouteTable
  SubnetBRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetB
      RouteTableId: !Ref RouteTable
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join
        - '-'
        - - !Ref ResourceNamePrefix
          - sg
      GroupDescription: SG for CodeDeploy demo for AWS DevOps Pro course
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: CodeDeployEcsDemoALB
      SecurityGroups:
        - !Ref SecurityGroup
      Subnets:
        - !Ref SubnetA
        - !Ref SubnetB
      Type: application
  AlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref AlbTargetGroupA
                Weight: 100
              - TargetGroupArn: !Ref AlbTargetGroupB
                Weight: 0
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  AlbTargetGroupA:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - ApplicationLoadBalancer
    Properties:
      Name: !Join
        - '-'
        - - !Ref ResourceNamePrefix
          - target-a
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref Vpc
  AlbTargetGroupB:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - ApplicationLoadBalancer
    Properties:
      Name: !Join
        - '-'
        - - !Ref ResourceNamePrefix
          - target-b
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref Vpc
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join
        - '-'
        - - !Ref ResourceNamePrefix
          - cluster
      CapacityProviders:
        - FARGATE
  EcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: !Join
          - '-'
          - - !Ref ResourceNamePrefix
            - container
          Essential: true
          Image: !Ref ContainerImageUri
          Cpu: 256
          Memory: 512
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              "awslogs-group": !Join
                - '_'
                - - !Join
                      - '/'
                      - - ecs
                        - !Ref AWS::StackName
                  - container-logs
              "awslogs-region": !Ref AWS::Region
              "awslogs-create-group": "true"
              "awslogs-stream-prefix": "ecs-task"
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: x86_64
        OperatingSystemFamily: LINUX
  EcsService:
    Type: AWS::ECS::Service
    DependsOn:
      - AlbListener
    Properties:
      Cluster: !GetAtt EcsCluster.Arn
      DesiredCount: 1
      DeploymentController:
        Type: CODE_DEPLOY
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: !Join
          - '-'
          - - !Ref ResourceNamePrefix
            - container
          ContainerPort: 8080
          TargetGroupArn: !Ref AlbTargetGroupA
        - ContainerName: !Join
          - '-'
          - - !Ref ResourceNamePrefix
            - container
          ContainerPort: 8080
          TargetGroupArn: !Ref AlbTargetGroupB
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
          AssignPublicIp: ENABLED
      TaskDefinition: !GetAtt EcsTaskDefinition.TaskDefinitionArn